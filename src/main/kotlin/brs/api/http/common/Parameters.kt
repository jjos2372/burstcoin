package brs.api.http.common

object Parameters {
    const val ALIAS_PARAMETER = "alias"
    const val AMOUNT_PLANCK_PARAMETER = "amountNQT"
    const val ALIAS_NAME_PARAMETER = "aliasName"
    const val FEE_PLANCK_PARAMETER = "feeNQT"
    const val PRICE_PLANCK_PARAMETER = "priceNQT"
    const val QUANTITY_QNT_PARAMETER = "quantityQNT"
    const val ASSET_PARAMETER = "asset"
    const val ASSETS_PARAMETER = "assets"
    const val GOODS_PARAMETER = "goods"
    const val ORDER_PARAMETER = "order"
    const val QUANTITY_PARAMETER = "quantity"
    const val ENCRYPTED_MESSAGE_DATA_PARAMETER = "encryptedMessageData"
    const val ENCRYPTED_MESSAGE_NONCE_PARAMETER = "encryptedMessageNonce"
    const val MESSAGE_TO_ENCRYPT_PARAMETER = "messageToEncrypt"
    const val MESSAGE_TO_ENCRYPT_IS_TEXT_PARAMETER = "messageToEncryptIsText"
    const val ENCRYPT_TO_SELF_MESSAGE_DATA = "encryptToSelfMessageData"
    const val ENCRYPT_TO_SELF_MESSAGE_NONCE = "encryptToSelfMessageNonce"
    const val MESSAGE_TO_ENCRYPT_TO_SELF_PARAMETER = "messageToEncryptToSelf"
    const val MESSAGE_TO_ENCRYPT_TO_SELF_IS_TEXT_PARAMETER = "messageToEncryptToSelfIsText"
    const val GOODS_DATA_PARAMETER = "goodsData"
    const val GOODS_NONCE_PARAMETER = "goodsNonce"
    const val PERIOD_PARAMETER = "period"
    const val PURCHASE_PARAMETER = "purchase"
    const val SECRET_PHRASE_PARAMETER = "secretPhrase"
    const val PUBLIC_KEY_PARAMETER = "publicKey"
    const val ACCOUNT_PARAMETER = "account"
    const val TIMESTAMP_PARAMETER = "timestamp"
    const val RECIPIENT_PARAMETER = "recipient"
    const val RECIPIENTS_PARAMETER = "recipients"
    const val SELLER_PARAMETER = "seller"
    const val BUYER_PARAMETER = "buyer"
    const val FIRST_INDEX_PARAMETER = "firstIndex"
    const val LAST_INDEX_PARAMETER = "lastIndex"
    const val NUMBER_OF_CONFIRMATIONS_PARAMETER = "numberOfConfirmations"
    const val HEIGHT_PARAMETER = "height"
    const val DECRYPTED_MESSAGE_IS_TEXT_PARAMETER = "decryptedMessageIsText"
    const val REFUND_PLANCK_PARAMETER = "refundNQT"
    const val DATA_PARAMETER = "data"
    const val NONCE_PARAMETER = "nonce"
    const val SUBSCRIPTION_PARAMETER = "subscription"
    const val ALIAS_URI_PARAMETER = "aliasURI"
    const val NAME_PARAMETER = "name"
    const val DESCRIPTION_PARAMETER = "description"
    const val FREQUENCY_PARAMETER = "frequency"
    const val AT_PARAMETER = "at"
    const val CREATION_BYTES_PARAMETER = "creationBytes"
    const val HEX_STRING_PARAMETER = "hexString"
    const val TRANSACTION_BYTES_PARAMETER = "transactionBytes"
    const val TRANSACTION_JSON_PARAMETER = "transactionJSON"
    const val CODE_PARAMETER = "code"
    const val DPAGES_PARAMETER = "dpages"
    const val CSPAGES_PARAMETER = "cspages"
    const val USPAGES_PARAMETER = "uspages"
    const val MIN_ACTIVATION_AMOUNT_PLANCK_PARAMETER = "minActivationAmountNQT"
    const val DISCOUNT_PLANCK_PARAMETER = "discountNQT"
    const val GOODS_TO_ENCRYPT_PARAMETER = "goodsToEncrypt"
    const val GOODS_IS_TEXT_PARAMETER = "goodsIsText"
    const val TAGS_PARAMETER = "tags"
    const val DELIVERY_DEADLINE_TIMESTAMP_PARAMETER = "deliveryDeadlineTimestamp"
    const val DELTA_QUANTITY_PARAMETER = "deltaQuantity"
    const val ESCROW_PARAMETER = "escrow"
    const val DECISION_PARAMETER = "decision"
    const val DECIMALS_PARAMETER = "decimals"
    const val ESCROW_DEADLINE_PARAMETER = "escrowDeadline"
    const val DEADLINE_ACTION_PARAMETER = "deadlineAction"
    const val REQUIRED_SIGNERS_PARAMETER = "requiredSigners"
    const val SIGNERS_PARAMETER = "signers"
    const val INCLUDE_ASSET_INFO_PARAMETER = "includeAssetInfo"
    const val INCLUDE_TRANSACTIONS_PARAMETER = "includeTransactions"
    const val TYPE_PARAMETER = "type"
    const val SUBTYPE_PARAMETER = "subtype"
    const val UNSIGNED_TRANSACTION_BYTES_PARAMETER = "unsignedTransactionBytes"
    const val SIGNATURE_HASH_PARAMETER = "signatureHash"
    const val FULL_HASH_RESPONSE = "fullHash"
    const val TRANSACTION_PARAMETER = "transaction"
    const val FULL_HASH_PARAMETER = "fullHash"
    const val ACCOUNT_ID_PARAMETER = "accountId"
    const val NUM_BLOCKS_PARAMETER = "numBlocks"
    const val BLOCK_PARAMETER = "block"
    const val INCLUDE_COUNTS_PARAMETER = "includeCounts"
    const val INCLUDE_EFFECTIVE_BALANCE_PARAMETER = "includeEffectiveBalance"
    const val DEADLINE_PARAMETER = "deadline"
    const val REFERENCED_TRANSACTION_FULL_HASH_PARAMETER = "referencedTransactionFullHash"
    const val REFERENCED_TRANSACTION_PARAMETER = "referencedTransaction"
    const val BROADCAST_PARAMETER = "broadcast"
    const val RECIPIENT_PUBLIC_KEY_PARAMETER = "recipientPublicKey"
    const val COMMENT_PARAMETER = "comment"
    const val MESSAGE_IS_TEXT_PARAMETER = "messageIsText"
    const val MESSAGE_PARAMETER = "message"
    const val UNSIGNED_TRANSACTION_JSON_PARAMETER = "unsignedTransactionJSON"
    const val IN_STOCK_ONLY_PARAMETER = "inStockOnly"
    const val COMPLETED_PARAMETER = "completed"
    const val PEER_PARAMETER = "peer"
    const val ACTIVE_PARAMETER = "active"
    const val STATE_PARAMETER = "state"
    const val ID_PARAMETER = "id"
    const val URI_PARAMETER = "uri"
    const val FEE_PARAMETER = "fee"
    const val AMOUNT_PARAMETER = "amount"
    const val PRICE_PARAMETER = "price"
    const val ESCROW_ID_PARAMETER = "escrowId"
    const val SUBSCRIPTION_ID_PARAMETER = "subscriptionId"
    const val BLOCK_HEIGHT_PARAMETER = "blockheight"
    const val SUBSCRIPTIONS_RESPONSE = "subscriptions"
    const val ESCROWS_RESPONSE = "escrows"
    const val ACCOUNTS_RESPONSE = "accounts"
    const val RECIPIENTS_RESPONSE = "recipients"
    const val RECEIVER_ID_PARAMETER = "receiverId"
    const val FEE_SUGGESTION_TYPE_PARAMETER = "feeSuggestionType"
    const val IMMUTABLE_PARAMETER = "immutable"
    const val INCLUDE_INDIRECT_PARAMETER = "includeIndirect"
    const val DOMAIN_PARAMETER = "domain"
    const val ACTION_PARAMETER = "action"
    const val PAYLOAD_PARAMETER = "payload"

    fun isFalse(text: String?): Boolean {
        return "false".equals(text, ignoreCase = true)
    }

    fun isTrue(text: String?): Boolean {
        return "true".equals(text, ignoreCase = true)
    }
}
